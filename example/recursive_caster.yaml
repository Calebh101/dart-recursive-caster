# This is the configuration file for recursive_caster.
# To reinitialize: dart run recursive_caster:initialize
# To generate: dart run recursive_caster


types:
  - List<Map<String, dynamic>>
  - List<Example<String>>

# This is how you add types that you can cast to. This is a list of strings, where each item is the target type. Imports don't matter at this stage.
#
# Example:
#
# types:
#   - Map<String, List<Map<String, dynamic>>>
#   - List<Set<Map<String, List<Map<String, dynamic>>>>>
#   - List<Map<String, num>>


imports:
  - example.dart deferred as main

# This is how you import packages for custom and non-standard types into the generated file. The syntax is:
#   - package:example/example.dart [as prefix] [show Class1,Class2]
# prefix and show are not required. If you supply a prefix, you will have to make sure to use the prefix in your `types` definition.
#
# Example:
#
# imports:
#   - dart:io show File
#   - dart:math as math show e
#   - package:flutter/material.dart as material


prefixes:
  "Example": main

# This is how you set prefixes for certain types, where file conflicts may be an issue.
# 'prefixes' is a dictionary of type string, string. The key is the type that needs the prefix, and the value is the prefix to be used.
# Example:
# prefixes:
#   "Example": "example"